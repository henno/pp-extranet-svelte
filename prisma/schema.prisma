generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model activities {
  id          Int           @id @default(autoincrement()) @db.UnsignedInt
  name        String        @db.VarChar(50)
  description String
  activitylog activitylog[]
}

model activitylog {
  timestamp  DateTime   @db.DateTime(0)
  id         Int        @id @default(autoincrement()) @db.UnsignedInt
  userId     Int        @db.UnsignedInt
  activityId Int        @db.UnsignedInt
  activities activities @relation(fields: [activityId], references: [id], onUpdate: Restrict, map: "activitylog_activities_id_fk")
  users      users      @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "activitylog_users_id_fk")

  @@index([activityId], map: "activitylog_activities_id_fk")
  @@index([userId], map: "activitylog_users_id_fk")
}

model companies {
  id   Int    @id @default(autoincrement()) @db.UnsignedInt
  name String @db.VarChar(50)
}

model orders {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  userId      Int      @db.UnsignedInt
  location    String
  createdAt   DateTime @db.DateTime(0)
  dueAt       DateTime @db.DateTime(0)
  description String
  users       users    @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "orders_users_id_fk")

  @@index([userId], map: "orders_users_id_fk")
}

model sessions {
  id     String @id
  userId Int    @db.UnsignedInt
  users  users  @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "sessions_users_userId_fk")

  @@index([userId], map: "sessions_users_userId_fk")
}

model settings {
  name  String  @id @db.VarChar(255)
  value String? @db.VarChar(765)
}

model translationlanguages {
  code String @id @db.VarChar(255)
  name String @db.VarChar(255)
}

model translations {
  id     Int     @id @default(autoincrement()) @db.UnsignedInt
  phrase String  @unique(map: "translations_translationPhrase_uindex") @db.VarChar(765)
  state  String  @default("existsInCode") @db.VarChar(255)
  source String? @db.VarChar(255)
}

model users {
  id          Int           @id @default(autoincrement()) @db.UnsignedInt
  name        String
  username    String        @unique(map: "users_userUsername_uindex")
  isAdmin     Int           @default(0) @db.TinyInt
  password    String
  deleted     Boolean       @default(false)
  activitylog activitylog[]
  orders      orders[]
  sessions    sessions[]
}
